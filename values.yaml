image:
  name: helloworld
  pullPolicy: Always
  tag: latest

build:
  enabled: true
  uri: 'https://github.com/malam84/springboot-ocp4-s2i-hello.git'
  ref: master
  #contextDir: /product-service
  mode: jvm
  jvm:
    imageStreamTag: 
      name: java:openjdk-11-el7
      useReleaseNamespace: false
      namespace: openshift
  output:
    kind: ImageStreamTag
    pushSecret:
  resources:
    limits:
      cpu: "1"
      memory: 2Gi
    requests:
      cpu: "1"
      memory: 1Gi

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false

route:
  enabled: true
  targetPort: http
  tls: 
    enabled: false

deploy:
  replica: 1
  resources:
    limits:
      cpu: "1"
      memory: 256Mi
    requests:
      cpu: "1"
      memory: 256Mi
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  livenessProbe:
    tcpSocket:
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}


----
pipeline {
  // Use Jenkins Maven slave
  // Jenkins will dynamically provision this as OpenShift Pod
  // All the stages and steps of this Pipeline will be executed on this Pod
  // After Pipeline completes the Pod is killed so every run will have clean
  // workspace
  agent {
    kubernetes {
      cloud 'openshift'                              
      defaultContainer 'jnlp'                        
      label "test"  
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    pod-template: jenkins-slave-sidecars
spec:
  serviceAccount: jenkins                            
  serviceAccountName: jenkins                      
  containers:
  - name: jnlp                                       
    image: default-route-openshift-image-registry.apps-crc.testing/openshift/ose-jenkins-agent:latest
    tty: true
    alwaysPull: true
    workingDir: /tmp                                  
    env:
    - name: PATH
      value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/tmp/bin
"""
    }
  }
    
     environment {
        OPENSHIFT_URL= "https://api.crc.testing:6443"
        OPENSHIFT_REGISTRY_URL_INTERNAL= "default-route-openshift-image-registry.apps-crc.testing"
        SERVICEACCOUNT= "jenkins-podman"
        NAMESPACE="podman-demo"
    }
    
    stages {
        stage('login podman') {
            steps {
                echo '========== START podman login and build ==============='
                 container('jnlp'){
            sh """
            podman login --tls-verify=false -u jenkins -p \$(oc whoami -t) ${OPENSHIFT_REGISTRY_URL_INTERNAL}
            """
              echo '========== START podman login and build done ==============='
                 }
                // withCredentials([string(credentialsId: 'openshift-token', variable: 'TOKEN')]) {
                //     container('podman'){
                //           echo "inside podman ..........."
                //          sh 'podman login -u $SERVICEACCOUNT -p $TOKEN $OPENSHIFT_REGISTRY_URL_INTERNAL --tls-verify=false'
                //          echo "outside podman ..........."
                //     }
                // }
            }
        }
    }
}
-----

pipeline {
  // Use Jenkins Maven slave
  // Jenkins will dynamically provision this as OpenShift Pod
  // All the stages and steps of this Pipeline will be executed on this Pod
  // After Pipeline completes the Pod is killed so every run will have clean
  // workspace
  agent {
    kubernetes {
      cloud 'openshift'                              
      defaultContainer 'jnlp'                        
      label "test"  
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    pod-template: jenkins-podman-demo
spec:
  serviceAccount: jenkins                            
  serviceAccountName: jenkins                      
  containers:
  - name: jnlp                                       
    image: image-registry.openshift-image-registry.svc:5000/openshift/ose-jenkins-base-agent:latest
    tty: true
    alwaysPull: true
    workingDir: /tmp                                  
    env:
    - name: PATH
      value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/tmp/bin
"""
    }
  }
    
     environment {
        OPENSHIFT_URL= "https://api.ocpuat.hla.hlinsurance.my:6443"
        OPENSHIFT_REGISTRY_URL_INTERNAL= "image-registry.openshift-image-registry.svc:5000"
        SERVICEACCOUNT= "jenkins"
        NAMESPACE="redhat-pipeline-demo"
    }
    
    stages {
         stage('AgentServiceBuilding') {
            steps {
				
                sh '''
				export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.20.0.8-2.el8.x86_64/
				export HTTPS_PROXY=http://10.255.16.152:8080
				export http_proxy=http://10.255.16.152:8080
                export https_proxy=http://10.255.16.152:8080
				echo $JAVA_HOME
                '''
                // dir("./var/lib/jenkins/jobs/agent-service-mvn-dev-New-pipeline/workspace") {
                //     //sh "cd /var/lib/jenkins/workspace/agent-service-pipeline && sudo docker build --build-arg http_proxy=http://10.255.16.152:8080 --build-arg https_proxy=http://10.255.16.152:8080 . "
                //     //sh "oc login --insecure-skip-tls-verify -u ocp4admin1 -p Redhat123 --server=https://api.ocpuat.hla.hlinsurance.my:6443"
                //     //sh "oc project ci-uat"
                //     //sh "oc patch bc ${application_name} -p '{\"metadata\":{\"labels\":{\"imagetag\":\"agentservice-tag\"}},\"spec\":{\"output\":{\"to\":{\"name\":\"dev-agentservice:latest\"}}}}'"
                //     //sh "oc start-build ${application_name} -n ci-uat --from-dir . --follow --wait"
                //     //sh "oc project ci-uat"
                //     //sh '/var/lib/jenkins/.ansible/roles/podman/podman-linux-amd64/usr/local/bin/podman login -u $SERVICEACCOUNT -p $TOKEN $OPENSHIFT_REGISTRY_URL_INTERNAL --tls-verify=false'
                // }
            }
        }
        stage("Clone git Repository") {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'hlajenkins', gitToolName: 'Default')]) {
                    sh 'git -c http.sslVerify=false clone --branch feature/MIC-22 http://10.151.38.176/root/hla-agent-service.git'
                    sh 'pwd'
                    sh 'ls -ltr'
                }
            }
            //    git(
            //        url: 'http://10.151.38.176/root/hla-agent-service.git'
            //        credentialsId: 'hlajenkins'
            //        branch: 'feature/MIC-22'
            //        )
            //     echo "clone done ..........."      
         //   }
        }
        
         stage('login openshift'){
            steps {
                withCredentials([string(credentialsId: 'openshift-token', variable: 'TOKEN')]){
                    sh 'oc login --insecure-skip-tls-verify $OPENSHIFT_URL --token=$TOKEN'
                  //  sh "oc project ${NAMESPACE}"
                    echo "inside namespace: ${NAMESPACE}"
                }
            }
         }
        stage('build image'){
            steps {
                  echo '========== START podman login and build ==============='
                 container('jnlp'){
            sh """
            podman login --tls-verify=false -u jenkins -p \$(oc whoami -t) ${OPENSHIFT_REGISTRY_URL_INTERNAL}
            podman build --tls-verify=false --squash -t ${OPENSHIFT_REGISTRY_URL_INTERNAL}/redhat-pipeline-demo/hla-agent-service -f ./hla-agent-service/Dockerfile
        """
        echo '========== END podman docker build'
            }
        }
      }
    }
}
